---
title: "Empowering Medical Insight <br> through an <br> Interactive R Shiny"
author: "Dewi Amaliah"
format:
  revealjs:
    title-slide-attributes:
      data-background-image: images/bg.png
      data-background-size: cover  
    transition: none
    smaller: true
    controls: true
    slide-number: false
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/siena_logo.png
    hide-from-titleSlide: "all"
    theme: styles/slide-styles.scss
    css: styles/additional-styles.css
editor: visual
---

## Agenda

-   Brief introduction to R Shiny
-   Importance of interactive tools in medical research
-   Examples of applications in biostatistics and healthcare
-   Case study on "Heart Failure Prediction"
-   Quiz

## Let's Put This into Context

![](images/context.png)

## What is Web Application?

::: callout-note
## Definition

-   A web application (or web app) is an application that can be accessed through a web browser.
-   Needs skills on javascript, html, or css.
:::

::: fragment
::: callout-note
## Goals

-   Connect people and data;
-   Make systems playful;
-   Personalise the view;
-   Reduce cognitive load.

[^1]
:::
:::

[^1]: [Source: Communicating data with interactive apps, Lecture Notes, Monash University](https://cwd.numbat.space/lectures/lecture-03.html#/etc5523-title)

## What is R Shiny?

::: columns
::: {.column width="20%"}
![](images/shiny.png){width="219"}
:::
:::

::: columns
::: {.column width="80%"}
-   Shiny ([Chang, et.al., 2023](https://CRAN.R-project.org/package=shiny)) is an R packages that support web app development using R.

-   No HTML/css/javascript required.

-   Enable data analysis in an interactive manners.

-   As it is developed using R, it can be supported by other R packages.

-   Can be hosted and accessed online.
:::
:::

## Why it is important?

### Especially in Biostatistics & Healthcare

::: callout-note
## Interactive data analysis and visualization enable:

-   Monitoring and analysis -\> quality improvement and performance monitoring
-   Decision support systems
-   Research and collaboration
-   Patient engagement and education
:::

## Shiny App in the Wild (1)

-   [Vaccine Queue Simulator](https://cbdrh.shinyapps.io/queueSim/) by Mark Hanly, Ois√≠n Fitzgerald, and Tim Churches

-   Decision support system, i.e., planning for healthcare capacity

    ![](images/vaccine_simulator.png)

## Shiny App in the Wild (2)

-   [Healthdown](https://hoga.shinyapps.io/healthdown/) by Peter Gandenberger and Andreas Hofheinz

-   Monitoring and analysis, i.e., comparing health metrics geographically

    ![](images/healthdown.png)

## Shiny App in the Wild (3)

-   [ReviewR](https://thewileylab.shinyapps.io/ReviewR/) by Laura Wiley, Luke Rasmussen, and David Mayer

-   Research and collaboration, i.e., connect to Electronic Health Record (EHR) data and doing data analysis

    ![](images/reviewR.png)

## Shiny App in the Wild (4)

-   [Genome browser](https://gallery.shinyapps.io/genome_browser/) by ICGC Data Portal

-   Research and collaboration, i.e., genome visualization

    ![](images/genome.png)

## Shiny App in the Wild (5)

-   [Nutrition calculator](https://yihanw.shinyapps.io/Recipe_Nutrition/) by Yihan Wu

-   Engagement and education, i.e., calculate nutrition for recipes

    ![](images/nutrition.png)

## Shiny's element

::: panel-tabset
## Overview

```{r, eval=FALSE, echo = TRUE}
# load the shiny package
library(shiny)

# define user interface object
ui <- fluidPage()

# define server function
server <- function(input, output) { }

# call to shinyApp() which returns a Shiny app object from an
# explicit UI/server pair
shinyApp(ui = ui, server = server)
```

## Client & Server Communication

![Source: Communicating data with interactive web apps, Lecture Notes, Monah University](images/serverclient.png)
:::

## Shiny's UI

::: columns
::: {.column width="60%"}
**Input element**

-   Interact with user by modifying the input values. Can be text, number, date, file, etc.

-   Input has an id to communicate with server

**Output element**

-   Display operation done in server

-   Can be a plot, table, text

**Layout**

-   Organize the layout of the app (panels or tabs)

-   Using themes

-   Explanatory text
:::

::: {.column width="40%"}
```{r , eval=FALSE, echo = TRUE}
# load the shiny package
library(shiny)

# define the user interface object with the appearance of the app
# layout is fluidPage
ui <- fluidPage(
  title("Create your Histogram"),
  # input type
  numericInput(inputId = "n", label = "Sample size", value = 25),
  # output type
  plotOutput(outputId = "hist")
)

```
:::
:::

## Input Options

![Example of input type in Shiny](images/inputs.png)

## Output Options

![List of output options in Shiny](images/outputs.png)

## Layout

::: panel-tabset
## Basic layout

![Layout options on Shiny](images/basic_layout.png)

## Tab Panel

![Tabset options on Shiny](images/tabpanel.png)

## Themes

![Themes option on Shiny. See also: https://rstudio.github.io/shinythemes/](images/themes.png){width="375"}

```{r, eval = FALSE, echo = TRUE}
library(shinythemes)

shinyApp(
  ui = fluidPage(theme = shinytheme("united"),
    ...
  ),
  server = function(input, output) { }
)
```
:::

## Shiny's Server

::: columns
::: {.column width="60%"}
**Operation/ Calculation**

-   Where all of the operation or calculation done
-   Takes all of the user inputs using the input id -\> reactive element

**Output element**

-   Render the output to be displayed on output

-   Pair with the output id on the UI side
:::

::: {.column width="40%"}
```{r , eval=FALSE, echo = TRUE}

# create the histogram output
server <- function(input, output) {
  output$hist <- renderPlot({
    hist(rnorm(input$n))
  })
}

```
:::
:::

## Reactivity

-   `reactiveValues` creates your own reactive values

-   `isolate` prevents reactions

-   `reactive` caches its value to reduce computation and notifies its dependencies when it has been invalidated

-   `observe` runs code when any reactive elements within it changes

-   `observeEvent` runs code when the first argument changes

## Deploy your App

-   Share your codes (app.R) and running it on R studio

-   Host online for free at shinyapps.io

-   Use [`shinylive`](https://medium.com/@rami.krispin/deploy-shiny-app-on-github-pages-b4cbd433bdc#:~:text=Shinylive%20is%20a%20serverless%20version%20of%20Shiny%2C%20which%20enables%20running,recommend%20watching%20this%20talk!)

-   Personal server

## Hands On

::: callout-note
## Goal

Create a Shiny app to do data exploration (visualization) and classification (several classification algorithm)
:::

::: callout-note
## Data

In this example, we will use data on obesity level (UCI Machine Learning Repository, 2019)

Download [here](https://archive.ics.uci.edu/dataset/544/estimation+of+obesity+levels+based+on+eating+habits+and+physical+condition)
:::

::: callout-note
## Tutorial

You can access the tutorial [here](https://github.com/Dewi-Amaliah/its_shiny_slide/blob/main/tutorial.pdf).
:::

## Quiz

![](https://i.gifer.com/877c.gif){fig-align="center"}

1st and 2nd winner will receive IDR 50k each from Siena

## Moving Forward

-   Learn more ([Mastering shiny (e-book)](https://mastering-shiny.org/), [tutorial](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html))

-   Can also be developed using Python

-   [Cheatsheet for Shiny](https://shiny.posit.co/r/articles/start/cheatsheet/)

-   [Debugging Shiny](https://shiny.posit.co/r/articles/improve/debugging/)

-   [More examples](https://shiny.posit.co/r/gallery/)
